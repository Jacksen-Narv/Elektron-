import matplotlib.pyplot as plt 
import numpy as np 
import scipy.integrate as sciInt

"""Funciones MatemÃ¡ticas"""

def Magnitud(Cx,Cy):
    return np.sqrt(Cx**2+Cy**2)

def Unitario(C1,C2):
    return C1/Magnitud(C1, C2)

def Seno_Mag(Cx,Cy):
    return Cy/np.sqrt((Magnitud(Cx, Cy))**3)

def Coseno_Mag(Cx,Cy):
    return Cx/np.sqrt((Magnitud(Cx, Cy))**3)

def Potencial(Q,Cx,Cy,Gx,Gy):
    return k*Q/Magnitud(Gx-Cx,Gy-Cy)

def E_integral(t,y,CharObject):
    ETx=0
    ETy=0
    i=0
    while CharObject[i][2]!=0:   
        ETx+=k*CharObject[i][2]*Coseno_Mag(y[0]-CharObject[i][0], y[1]-CharObject[i][1])
        ETy+=k*CharObject[i][2]*Seno_Mag(y[0]-CharObject[i][0], y[1]-CharObject[i][1])
        i+=1
    return [Unitario(ETx, ETy),Unitario(ETy, ETx)]
  
def TresTristesTigres(A):
    for i in range(0,len(A)):
        for j in range(0,len(A)):
            for k in range(0,6):
                if i==CharObject[k][0] and j==CharObject[k][1]:
                    A[i][j]=2
                else:
                    A[i][j]=-(-A[i][j])**(1/2)
    return A

"""Creating storage space"""

def Storage():
    return [[0]*3 for d in range(0,6)] #Colums: x0,y0,charge ; Rows: Objects

"""Asigna propiedades carga"""

def Asignar():
    Equipo=Storage()
    
    Equipo[0][0]=2
    Equipo[0][1]=0
    Equipo[0][2]=20

    Equipo[1][0]=-2
    Equipo[1][1]=0
    Equipo[1][2]=-2

    Equipo[2][0]=0
    Equipo[2][1]=0
    Equipo[2][2]=40

    Equipo[3][0]=0
    Equipo[3][1]=3
    Equipo[3][2]=-2

    Equipo[4][0]=0
    Equipo[4][1]=-2
    Equipo[4][2]=2

    Equipo[5][0]=1
    Equipo[5][1]=1
    Equipo[5][2]=-34
    
    return Equipo

"""Plot propierties"""

def DoPlot(x0,xf,y0,yf):
    Field.xaxis.set_ticks([])        
    Field.yaxis.set_ticks([])        
    Field.axis([x0, xf, y0, yf])     
    Field.set_aspect('equal')        

"""Creating grid for vector und equipotencial plots"""

def Space(x0,xf,y0,yf):
    if Show[1]==True:
        n=500
    else:
        n=20
    return [np.linspace(x0, xf, n),np.linspace(y0, yf, n)]
    
""""Defining Potencial as Plot"""

def Voltaje():
    V=0
    for i in range(0,NumObjects): 
        V+=Potencial(CharObject[i][2],CharObject[i][0],CharObject[i][1],X,Y)
    V1=np.log(V)+100
    V2=-np.log(-V)-100
    return [V1,V2]

"""Rendering charges"""

def PointCharge():

        for i in range(0,NumObjects):
            if CharObject[i][2]>0:
                plt.plot(CharObject[i][0], CharObject[i][1], "ro", ms=6*(CharObject[i][2])**(1/3))
            else:
                plt.plot(CharObject[i][0], CharObject[i][1], "bo", ms=6*(-CharObject[i][2])**(1/3))

"""VECTOR FIELD DIAGRAM""" 

def VecField(x,y):
    ETx,ETy=np.meshgrid(x,y)
    for i in range(0,NumObjects):   
        Ex=k*CharObject[i][2]*Coseno_Mag(X-CharObject[i][0], Y-CharObject[i][1])
        Ey=k*CharObject[i][2]*Seno_Mag(X-CharObject[i][0], Y-CharObject[i][1])
        ETx+=Ex
        ETy+=Ey
    ETx_u=Unitario(ETx, ETy)
    ETy_u=Unitario(ETy, ETx)
    Field.quiver(X, Y, ETx_u, ETy_u, scale=30)

"""LINE FIELD DIAGRAM""" 

def LineField():
    R0=0.1
    for i in range(0,NumObjects):
        dt=0.1
        if CharObject[i][2]<0:
            dt=-dt
        for theta in np.linspace(0, 2*np.pi*15/16, 16):
            r=sciInt.ode(E_integral)
            r.set_f_params(CharObject)
            x=[ CharObject[i][0] + np.cos(theta)*R0 ]
            w=[ CharObject[i][1] + np.sin(theta)*R0 ]
            r.set_initial_value([x[0],w[0]])
            while (Limits[0]<r.y[0] and r.y[0]<Limits[1]) and (Limits[2]<r.y[1] and r.y[1]<Limits[3]):
                r.integrate(r.t+dt)
                x.append(r.y[0])
                w.append(r.y[1])
                a=0
                for j in range(0,NumObjects):
                    if Magnitud(r.y[0]-CharObject[j][0], r.y[1]-CharObject[j][1])<R0:
                        a=1
                        break
                if a==1:
                    break
            plt.plot(x, w, "k")

"""MAIN"""

NumObjects=6
CharObject=Asignar()                #Info charges

k=8.9874*10**(-3)      #Constant NM2/muC2

Show=[False,True,False,False,False] #Show in plot: vecField, Equi, LineDiagram, Charges, Potencial
Limits=[-5,5,-5,5]                  #Limits grid

if Show[0]==True or Show[1]==True:                      #Creating grid if necessary
    Vec=Space(Limits[0],Limits[1],Limits[2],Limits[3])  
    X, Y = np.meshgrid(Vec[0], Vec[1])
fig, (Field) = plt.subplots(ncols= 1, figsize =(7, 7))  #Creating plot

if Show[0]==True: 
    VecField(Vec[0],Vec[1])

elif Show[1]==True:
    V_e=Voltaje()
    plt.contour(X, Y, V_e[0], 30, colors='k', linestyles="solid")
    plt.contour(X, Y, V_e[1], 20, colors='k')

elif Show[2]==True:
    LineField()

if Show[3]==True:
    PointCharge()  

DoPlot(Limits[0],Limits[1],Limits[2],Limits[3])
plt.show() 
